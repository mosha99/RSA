@using RSA.Service
@using System.Text
<RadzenCard Style="margin: var(--rz-form-field-margin);">
    <RadzenFieldset AllowCollapse="true" Text="Decrypt Message Part">
        <RadzenStack class="w-100">
            <RadzenRow class="w-100" AlignItems="AlignItems.Center">
                <RadzenFormField class="w-100" Text="Encrypt" Style="width: 100%;">
                    <RadzenTextArea @bind-Value="Message" aria-label="TextArea" />
                </RadzenFormField>
            </RadzenRow>

            <RadzenRow class="w-100" AlignItems="AlignItems.Center">
                <RadzenFormField class="w-100" Text="Private Key" Style="width: 100%;">
                    <RadzenTextArea @bind-Value="PrivateKey" aria-label="TextArea" />
                </RadzenFormField>
            </RadzenRow>

            <RadzenRow class="w-100" AlignItems="AlignItems.Center">
                <RadzenFormField class="w-100" Text="Share Key" Style="width: 100%;">
                    <RadzenTextArea @bind-Value="ShareKey" aria-label="TextArea" />
                </RadzenFormField>
            </RadzenRow>

            <RadzenRow class="w-100" AlignItems="AlignItems.Center">
                <RadzenButton Disabled="EnableButton" Click="Decode" Style="margin: var(--rz-form-field-margin);">Message</RadzenButton>
                <RadzenButton Disabled="EnableButton" Click="ToChar" Style="margin: var(--rz-form-field-margin);">To Char</RadzenButton>
                <RadzenFormField class="w-100" Text="Encryption" Style="width: 100%;">
                    <RadzenTextArea @bind-Value="Result" aria-label="TextArea" />
                </RadzenFormField>
            </RadzenRow>
        </RadzenStack>
    </RadzenFieldset>
</RadzenCard>

@code {
    [Parameter] public required string PrivateKey { set; get; }
    [Parameter] public required string ShareKey { set; get; }
    [Parameter] public required string Message { set; get; }
    [Parameter] public EventCallback<string> OnResult { set; get; }

    public string Result { set; get; } = "";
    bool _convertedToChar = false;

    bool EnableButton =>
        string.IsNullOrWhiteSpace(Message) ||
        string.IsNullOrWhiteSpace(PrivateKey) ||
        string.IsNullOrWhiteSpace(ShareKey);

    private async Task Decode()
    {
        _convertedToChar = false;
        Result = MessageDecoder.Decode(Message, PrivateKey, ShareKey).ToString();

        if (OnResult.HasDelegate)
            await OnResult.InvokeAsync(Result);
    }

    private void ToChar()
    {

        if (_convertedToChar) return;
        _convertedToChar = true;
        try
        {
            StringBuilder sb = new StringBuilder();

            for (int i = 0; i < Result.Length; i += 3)
            {
                string ti = Result.Substring(i, 3);

                var ch = (char)int.Parse(ti);

                sb.Append(ch);
            }

            Result = sb.ToString();
        }
        catch (Exception e)
        {
            StringBuilder sb = new StringBuilder();
            Result = "0" + Result;
            for (int i = 0; i < Result.Length; i += 3)
            {
                string ti = Result.Substring(i, 3);

                var ch = (char)int.Parse(ti);

                sb.Append(ch);
            }
            Result = sb.ToString();
        }
    }

}
